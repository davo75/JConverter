/*
 This view class is reponsible for main user interface view. It allows the user
 to interact with the application. The user can choose between several untis of 
 measurements and enter a value to convert. Conversion can be in either direction.
 
 @author David Pyle 041110777
 @version 1.0
 @since 4/4/2016
  
 Methods:
    - String formatValue(double value)
    + double getFromValue()   
    + double getToValue()
    + void setFromValue(double convertedValue)
    + double getToValue()
    + void setToValue(double convertedValue)
    + void setFromCategory(int index)
    + void setToCategory(int index)
    + void setUnitCategory(int unitCat)
    + int getUnitCategory()
    + void setUnitFromItems(String[] unitFromCat)
    + void setUnitToItems(String[] unitToCat)
    + void setUnitCat(String[] unitCat)
    + void addInputFromListener(KeyAdapter listenInputFrom)
    + void addInputToListener(KeyAdapter listenInputTo)
    + void addUnitCatListener(ItemListener listenUnitCat)
    + void addUnitFromListener(ItemListener listenUnitFrom)
    + void addUnitToListener(ItemListener listenUnitTo)
    + void addExitListener(ActionListener listenForExit)
    + void addImportMenuListener(ActionListener listenForImport)
    + void displayMsg(String msg, String msgType)
    + void clearMsg()

 Classes this class requires    
    java.awt.Toolkit;
    java.awt.event.ActionListener;
    java.awt.event.ItemListener;
    java.awt.event.KeyAdapter;
    java.math.BigDecimal;
    java.text.DecimalFormat;
    javax.swing.KeyStroke;
 */
package myconverter;

import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import javax.swing.KeyStroke;

/**
 *
 * @author davidpyle
 */
public class JConverterView extends javax.swing.JFrame {

    /**
     * Constructor Initialises interface components and sets keyboard shortcuts
     */
    public JConverterView() {

        initComponents();
        //set keyboard shortcut for showing Import Dialog (Ctrl-I)
        menuImport.setAccelerator(KeyStroke.getKeyStroke('I', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        //set keyboard shortcut for quitting application (Ctrl-Q)
        menuExit.setAccelerator(KeyStroke.getKeyStroke('Q', Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        txtUnitFrom = new javax.swing.JTextField();
        lblEqualsSign = new javax.swing.JLabel();
        txtUnitTo = new javax.swing.JTextField();
        cmbUnitTo = new javax.swing.JComboBox();
        cmbUnitFrom = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        cmbUnitCategory = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        lblMessage = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuImport = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JConverter");
        setResizable(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Unit Conversion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        txtUnitFrom.setColumns(10);
        txtUnitFrom.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lblEqualsSign.setText("=");

        txtUnitTo.setColumns(10);
        txtUnitTo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUnitFrom)
                    .addComponent(cmbUnitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(lblEqualsSign)
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtUnitTo)
                    .addComponent(cmbUnitTo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUnitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtUnitTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblEqualsSign)))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbUnitFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbUnitTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Unit Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        cmbUnitCategory.setMinimumSize(new java.awt.Dimension(160, 27));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(cmbUnitCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cmbUnitCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setLayout(new java.awt.BorderLayout());

        lblMessage.setForeground(new java.awt.Color(255, 51, 51));
        lblMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMessage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jMenu1.setText("File");

        menuImport.setText("Import");
        jMenu1.add(menuImport);

        menuExit.setText("Exit");
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addGap(16, 16, 16)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(28, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(106, 106, 106)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(102, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Formats a number to 5 decimal places
     *
     * @param value the number to format
     * @return string representation 5 decimal placed number
     */
    private String formatValue(double value) {

        //number of decimal places to set
        int decimalPlaces = 5;
        //create a new BigDecimal object with value rounded up
        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(decimalPlaces, BigDecimal.ROUND_HALF_UP);

        //format the value
        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(5);
        df.setMinimumFractionDigits(0);
        df.setGroupingUsed(false);

        String result = df.format(bd);
        //return the string version of the formatted value
        return result;
    }

    /**
     * Gets the value entered into the From input box
     *
     * @return the value entered
     */
    public double getFromValue() {
        //check something entered
        if (txtUnitFrom.getText().isEmpty()) {
            return 0;
        } else {
            return Double.parseDouble(txtUnitFrom.getText());
        }
    }

    /**
     * Sets the From input to the converted value
     *
     * @param convertedValue the converted value
     */
    public void setFromValue(double convertedValue) {

        txtUnitFrom.setText(formatValue(convertedValue));
    }

    /**
     * Gets the value entered into the To input box
     *
     * @return the value entered
     */
    public double getToValue() {
        //check something entered
        if (txtUnitTo.getText().isEmpty()) {
            return 0;
        } else {
            return Double.parseDouble(txtUnitTo.getText());
        }
    }

    /**
     * Sets the To input to the converted value
     *
     * @param convertedValue the converted value
     */
    public void setToValue(double convertedValue) {

        txtUnitTo.setText(formatValue(convertedValue));
    }

    /**
     * Sets the index of the From unit of measurement comboxBox
     *
     * @param index the index to set to
     */
    public void setFromCategory(int index) {
        cmbUnitFrom.setSelectedIndex(index);
    }

    /**
     * Sets the index of the To unit of measurement comboxBox
     *
     * @param index the index to set to
     */
    public void setToCategory(int index) {
        cmbUnitTo.setSelectedIndex(index);
    }

    /**
     * Sets the index of the Unit Category comboBox
     *
     * @param unitCat the index to set to
     */
    public void setUnitCategory(int unitCat) {
        cmbUnitCategory.setSelectedIndex(unitCat);
    }

    /**
     * Gets the index selected in the Unit Category comboBox
     *
     * @return the index selected
     */
    public int getUnitCategory() {
        return cmbUnitCategory.getSelectedIndex();
    }

    /**
     * Populates the From comboBox menu items
     *
     * @param unitFromCat the menu items
     */
    public void setUnitFromItems(String[] unitFromCat) {

        //clear any items in the comboBox
        cmbUnitFrom.removeAllItems();

        //add the menu items
        for (String conversion : unitFromCat) {
            cmbUnitFrom.addItem(conversion);
        }
    }

    /**
     * Populates the To comboBox menu items
     *
     * @param unitToCat the menu items
     */
    public void setUnitToItems(String[] unitToCat) {

        //clear any items in the comboBox
        cmbUnitTo.removeAllItems();

        //add the menu items
        for (String conversion : unitToCat) {
            cmbUnitTo.addItem(conversion);
        }
    }

    /**
     * Populates the Unit Category comboBox menu items
     *
     * @param unitCat the menu items
     */
    public void setUnitCat(String[] unitCat) {

        //clear any items in the comboBox
        cmbUnitCategory.removeAllItems();

        //add the menu items
        for (String conversion : unitCat) {
            cmbUnitCategory.addItem(conversion);
        }
    }

    /**
     * Adds a listener to the From input box
     *
     * @param listenInputFrom the keyAdapter that listens for a key press
     */
    public void addInputFromListener(KeyAdapter listenInputFrom) {
        txtUnitFrom.addKeyListener(listenInputFrom);
    }

    /**
     * Adds a listener to the To input box
     *
     * @param listenInputTo the keyAdapter that listens for a key press
     */
    public void addInputToListener(KeyAdapter listenInputTo) {
        txtUnitTo.addKeyListener(listenInputTo);
    }

    /**
     * Adds a listener to the Unit Category comboBox
     *
     * @param listenUnitCat the ItemListener that listens for comboBox change
     */
    public void addUnitCatListener(ItemListener listenUnitCat) {
        cmbUnitCategory.addItemListener(listenUnitCat);
    }

    /**
     * Adds a listener to the From Unit comboBox
     *
     * @param listenUnitFrom the ItemListener that listens for comboBox change
     */
    public void addUnitFromListener(ItemListener listenUnitFrom) {
        cmbUnitFrom.addItemListener(listenUnitFrom);
    }

    /**
     * Adds a listener to the To Unit comboBox
     *
     * @param listenUnitTo the ItemListener that listens for comboBox change
     */
    public void addUnitToListener(ItemListener listenUnitTo) {
        cmbUnitTo.addItemListener(listenUnitTo);
    }

    /**
     * Adds a listener to the exit menu item
     *
     * @param listenForExit the ActionListener that listens for a exit menu
     * click
     */
    public void addExitListener(ActionListener listenForExit) {
        menuExit.addActionListener(listenForExit);
    }

    /**
     * Adds a listener to the import menu item
     *
     * @param listenForImport the ActionListener that listens for a import menu
     * click
     */
    public void addImportMenuListener(ActionListener listenForImport) {
        menuImport.addActionListener(listenForImport);
    }

    /**
     * Displays error/warning messages
     *
     * @param msg the message to display
     * @param msgType the message type (error or warning)
     */
    public void displayMsg(String msg, String msgType) {
        switch (msgType) {
            //error messages
            case "error":
                lblMessage.setText("Error: " + msg);
                break;
            //warning messages
            case "warning":
                lblMessage.setText("Warning: " + msg);
                break;
            //default messages
            default:
                lblMessage.setText(msg);
        }

    }

    /**
     * Clears any error/warning messages
     */
    public void clearMsg() {
        lblMessage.setText(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbUnitCategory;
    private javax.swing.JComboBox cmbUnitFrom;
    private javax.swing.JComboBox cmbUnitTo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblEqualsSign;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuImport;
    private javax.swing.JTextField txtUnitFrom;
    private javax.swing.JTextField txtUnitTo;
    // End of variables declaration//GEN-END:variables
}
